<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>类</title>
      <link href="/2025/07/24/%E7%B1%BB/"/>
      <url>/2025/07/24/%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="定义Java类："><a href="#定义Java类：" class="headerlink" title="定义Java类："></a>定义Java类：</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 类名<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们使用的Main其实也是一个类</p><p>之后在大括号里面可以定义该类的各种属性，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token comment">//String大写</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment">//注意结尾没有分号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用类"><a href="#使用类" class="headerlink" title="使用类"></a>使用类</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>使用<strong>new</strong>来创建类的对象，类似于C++中为指针分配空间</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时p存放的就不是对象本身了，而是对象的引用</p><p>也可以创建一个空对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> p<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><p>对于类的对象来说，println会自动调用toString方法，不用显式地写出，不过默认toString会以 <code>类名+@+对象内存地址的十六进制</code>表示出来，想要正常表示需要重写toString函数</p><h3 id="访问和改变属性"><a href="#访问和改变属性" class="headerlink" title="访问和改变属性"></a>访问和改变属性</h3><p>使用 “ .  “  来访问对象的属性，并且做出修改。</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">p<span class="token punctuation">.</span>name<span class="token operator">=</span>"别无选择“<span class="token punctuation">;</span>p<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注：各种类型也是有初始值的，int等类型默认为0，bool默认为false，类类型默认为null</p><h3 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h3><p>对于每一个类，可以在其中定义不同的方法，即函数</p><p>格式和函数定义一样</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">void</span> greet<span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token class-name">Person</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"别无选择"</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法时，格式为：对象.方法名();</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>Java类中也有this关键字，不过和C不同，此时this不是指针，使用时也不用“ →”来访问属性，而是使用” . “</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>Java类中也存在函数的重载，语法和C相同</p><p>区别：<strong>重写</strong></p><h3 id="添加代码块"><a href="#添加代码块" class="headerlink" title="添加代码块"></a>添加代码块</h3><p>在类定义中添加一个代码块，此时块中的代码会在构造对象时执行一次</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>"我是代码块“<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>每个类在定义时都隐含着一个默认的构造方法（构造器），其形式为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>无返回值，函数名与类名相同</p><p>可以自己显式地定义构造方法，此时默认构造方法会被覆盖掉。</p><p>注：代码块和构造方法的执行顺序：先代码块，再构造方法  </p><h2 id="静态变量，静态方法，静态代码块"><a href="#静态变量，静态方法，静态代码块" class="headerlink" title="静态变量，静态方法，静态代码块"></a>静态变量，静态方法，静态代码块</h2><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>类中也可以定义静态变量，形式为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时类中所有对象共用该’变量，并且可以用类名之间访问静态变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>何时对静态变量进行初始化？</p><p>JVM只在类使用的时候才加载类，以下是加载类的情况：</p><ul><li>访问类的静态变量，或者为静态变量赋值</li><li>new创建类的实例（隐式加载）</li><li>调用类的静态方法</li><li>子类初始化时</li><li>其他</li></ul><p>所有被标记为静态的内容，会在类刚加载的时候就分配，而不是在对象创建的时候分配，所以说<strong>静态内容一定会在第一个对象初始化之前完成加载</strong></p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>和静态变量类似，用static修饰以定义静态方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时静态方法中<strong>只能访问静态变量和其他的静态方法</strong>，不能使用this , super关键字</p><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>在创建一个类的对象时，先进行静态变量初始化，再执行静态代码块，再进行成员变量初始化，再执行普通代码块，再进行构造方法  </p><h2 id="访问权限控制"><a href="#访问权限控制" class="headerlink" title="访问权限控制"></a>访问权限控制</h2><p>类和类的属性都有其访问权限，分为：默认，public，protected，private</p><h3 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h3><p>访问权限可以是<strong>默认</strong>和<strong>public</strong></p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="类的属性（变量和方法）"><a href="#类的属性（变量和方法）" class="headerlink" title="类的属性（变量和方法）"></a>类的属性（变量和方法）</h3><p>四种访问权限均可以</p><ul><li>默认：只能被类本身和同包中的其他类访问。</li><li>public：标记为公共的内容，允许在任何地方被访问。</li><li>protected：标记为受保护的内容可以能被类本身和同包中的其他类访问，也可以被子类访问（继承）。</li><li>private：标记为私有的内容无法被除当前类以外的任何位置访问。</li></ul><p><img src="/2025/07/24/%E7%B1%BB/image.png"></p><p>注：访问权限的关键字均写在类/类属性的前面  </p><h2 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h2><p>将类的变量都设置为private，通过getter和setter函数实现类的变量的访问和改变</p><p>也可以对类的构造方法做出改变：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> getName<span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//设置默认构造方法为私有</span><span class="token keyword">private</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这种方式可以实现单例（单例模式就是全局只能使用这一个对象，不能创建更多的对象）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token comment">//定义私有静态变量，此时insstance即为只能使用的对象</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Person</span> instance<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span>nulll<span class="token punctuation">)</span>instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p><strong>所有的类都继承于Object类</strong>，因此所有的类中都包含Object类中的方法</p><p>其内容包括：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Object</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">registerNatives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//标记为native的方法是本地方法，底层是由C++实现的</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token function">registerNatives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//这个类在初始化时会对类中其他本地方法进行注册，本地方法不是我们SE中需要学习的内容，我们会在JVM篇视频教程中进行介绍</span>    <span class="token punctuation">}</span>    <span class="token comment">//获取当前的类型Class对象，这个我们会在最后一章的反射中进行讲解，目前暂时不会用到</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取对象的哈希值，我们会在第五章集合类中使用到，目前各位小伙伴就暂时理解为会返回对象存放的内存地址</span>    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                重要！！！！    <span class="token comment">//判断当前对象和给定对象是否相等，默认实现是直接用等号判断，也就是直接判断是否为同一个对象</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>                重要！！！！      <span class="token comment">//克隆当前对象，可以将复制一个完全一样的对象出来，包括对象的各个属性</span>    <span class="token keyword">protected</span> <span class="token keyword">native</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span><span class="token punctuation">;</span>                重要！！！！    <span class="token comment">//将当前对象转换为String的形式，默认情况下格式为 完整类名@十六进制哈希值</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//唤醒一个等待当前对象锁的线程，有关锁的内容，我们会在第六章多线程部分中讲解，目前暂时不会用到</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//唤醒所有等待当前对象锁的线程，同上</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使得持有当前对象锁的线程进入等待状态，同上</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>    <span class="token comment">//同上</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token keyword">int</span> nanos<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token comment">//同上</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token comment">//当对象被判定为已经不再使用的“垃圾”时，在回收之前，会由JVM来调用一次此方法进行资源释放之类的操作，这同样不是SE中需要学习的内容，这个方法我们会在JVM篇视频教程中详细介绍，目前暂时不会用到</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：</p><ul><li><p>equals方法判断为true的条件是两个变量所指的是同一个对象，即使两个变量所指对象的所有属性都相同，只要它们所指的不是同一个对象，也会返回false</p><p>  这时就需要进行<strong>方法的重写</strong>了</p></li><li><p>Java中的拷贝（Clone）是<strong>浅拷贝</strong></p></li></ul><h2 id="类的继承（无多继承）"><a href="#类的继承（无多继承）" class="headerlink" title="类的继承（无多继承）"></a>类的继承（无多继承）</h2><p>Java中类的继承要使用<strong>extends</strong>关键字</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时，Worker类为Person类的子类，Person类为Worker类的父类（超类）</p><p>子类继承了父类的所有属性，只要父类属性未用private修饰，那么子类都可以访问</p><p>注：类的继承可以不断向下，但是同时只能继承一个类，同时，标记为<code>final</code>的类不允许被继承</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token comment">//class前面添加final关键字表示这个类已经是最终形态，不能继承</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><h4 id="父类中的构造方法含参（不是默认）"><a href="#父类中的构造方法含参（不是默认）" class="headerlink" title="父类中的构造方法含参（不是默认）"></a>父类中的构造方法含参（不是默认）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span>                <span class="token comment">//可以用protected修饰变量，此时外部就不能访问这些变量了</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token class-name">String</span> profession<span class="token punctuation">;</span><span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>profession<span class="token operator">=</span>profession<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好！我叫"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"今年"</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时子类必须要在构造方法中调用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token string">"工人"</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token comment">//super代表父类，父类的构造方法就是super()</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：super函数前不能有任何语句。</strong></p><p>为什么？</p><p>因为子类在构造时，不仅要初始化子类的属性，还需要初始化父类的属性，所以说在默认情况下，子类其实是调用了父类的构造方法的，只是在无参的情况下可以省略，但是现在父类构造方法需要参数，那么我们就需要手动指定了。</p><p>继承存在向上转型，即可以用子类当做父类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> person<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"别无选择"</span><span class="token punctuation">,</span><span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然，此时也可以通过<strong>强制类型转换</strong>再将person转换为Student类（<strong>前提是它原本new的时候就为Student</strong>）[将一个被当做父类使用的子类对象，转换回子类]</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Student</span> student<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span>person<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="关键字instanceof"><a href="#关键字instanceof" class="headerlink" title="关键字instanceof"></a>关键字instanceof</h3><p>可以用来判断某个变量所引用的对象是否为某个类或者某个类的子类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//我们可以使用instanceof关键字来对类型进行判断</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象是 Student 类型的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> person<span class="token punctuation">;</span><span class="token comment">//先强转类型再使用方法</span>        student<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象是 Person 类型的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用instanceof时，如果要使用对应类的方法必须先强制转换类型</p><p>但是在Java16中提供了一种新写法**（类型判断模式匹配）**：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//这里的student即为强转后的变量名</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象是 Student 类型的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="同名"><a href="#同名" class="headerlink" title="同名"></a>同名</h3><p>子类可以定义与父类相同名称的变量，此时默认指向为子类中定义的变量</p><p>如果想要访问父类中该变量，可以使用super关键字：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">"别无选择"</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">",我在工作！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Worker</span> worker<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>worker<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时name将打印为”别无选择”</p><p>如果改为  <code>super.name()</code> ,将打印为”null”  （super只能往上跳一级，不能super.super)  </p><h2 id="方法的重写（多态）"><a href="#方法的重写（多态）" class="headerlink" title="方法的重写（多态）"></a>方法的重写（多态）</h2><p>重写不同于重载，重载是为一个方法提供了多种形式，而重写则是将一个新的同名方法覆盖了原方法</p><p>形式：在开头加一个注释 <code>@Override</code>,这样编译器可以检查重写形式的正确性（不加也行），之后就按照原方法的返回类型，函数名，参数列表相应地写出，函数体就可以自由书写了</p><p>子类重写的方法的访问权限可以比父类的方法高，但不能比父类方法的访问权限低</p><p>例如，对Object中的equals方法进行重写，使其在不同对象只要变量值相同下就返回true：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token class-name">Person</span> person<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">==</span>person<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：此时对于Object定义的变量，但指向对象是Person来说，使用equals方法仍然对应的是重写之后的equals方法(  <code>Object object=new Person();</code> )</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>子类重写的方法内部其实也可以调用原本父类的方法（仅限类的定义中使用），此时要用到super关键字。</p><p>在使用之后执行时，程序不仅会执行原本父类的方法，也会接着执行子类的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原本的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重写后的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>```  ## 类中的<span class="token keyword">final</span>类中的<span class="token keyword">final</span>也是修饰在各种变量的前面的（但要放在访问权限后面，例如 `<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>`对于变量，加上<span class="token keyword">final</span>后，该变量在运行中只能被赋值一次对于方法，加上<span class="token keyword">final</span>后，代表该方法处于最终形态，不能再被重写（能被重载）  ## 抽象类定义类时，在访问权限后加 `<span class="token keyword">abstract</span>` 关键字，可使该类变为抽象类抽象类中可以定义抽象方法（并不是一定有抽象方法），形式与定义抽象类相同，<span class="token operator">*</span><span class="token operator">*</span>函数体则是不用给出<span class="token operator">*</span><span class="token operator">*</span>，此时子类中<span class="token operator">*</span><span class="token operator">*</span>必须重写<span class="token punctuation">(</span>实现）<span class="token operator">*</span><span class="token operator">*</span>该抽象方法```java<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> sex<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"会考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时就<strong>无法使用new来创建Person类</strong>了，因为Person类为抽象类，而抽象类中可能会存在某些方法没有实现。<strong>只能创建它的子类</strong></p><p>（当然，也可以用<strong>匿名内部类</strong>）</p><p>因此，抽象类主要用作继承，而且抽象类的子类也可以是抽象类</p><p>注：抽象方法的访问权限不能是private  </p><h2 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h2><p>Java通过把基本类型（byte，short，int，float，double，char，boolean）各自封装为类，实现面向对象的功能</p><p>其对应如下：</p><ul><li>byte    →    Byte</li><li>short   →    Short</li><li>int       →    Integer</li><li>long    →    Long</li><li>float    →    Float</li><li>double→    Double</li><li>char     →    Charater</li><li>boolean→  Boolean</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4><p>与对象的创建相同</p><p>这里以Integer为例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，定义后，引用所指对象的值（这里是10）不能改变，它是 <code>final</code> 类型的（即使令i  = i+10，此时引用所指的是一个新的对象）</p><h4 id="自动装箱拆箱"><a href="#自动装箱拆箱" class="headerlink" title="自动装箱拆箱"></a>自动装箱拆箱</h4><p>其实，包装类型支持<strong>自动装箱</strong>，即可以直接将一个对应的基本类型值作为对应包装类型引用变量的值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">//Integer i = Integer.valueOf(10)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时也支持拆箱：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> i<span class="token punctuation">;</span>     <span class="token comment">//int a= i.intValue();</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样，包装类就能轻松地参与到基本类型的运算中</p><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>值得注意的是，通过之前学习可知，即使引用所指类的成员变量相同，只要它们指的是不同对象， <code>==</code> 返回的就是false。对于自动装箱来说，这个结论<strong>不一定成立</strong>。</p><p>比如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>返回的是 <code>true</code> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>返回的是 <code>false</code></p><p>这是因为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>   <span class="token comment">//这里会有一个IntegerCache，如果在范围内，那么会直接返回已经提前创建好的对象</span>        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IntegerCache会默认缓存-128<del>127之间的所有值，将这些值提前做成包装类放在数组中存放，如果直接让 -128</del>127之间的值自动装箱为Integer类型的对象，那么始终都会得到同一个对象，这是为了提升效率，因为小的数使用频率非常高，有些时候并不需要创建那么多对象，创建对象越多，内存也会消耗更多。</p><p>但是如果超出这个缓存范围的话，就会得到不同的对象了</p><h4 id="判断值是否相等"><a href="#判断值是否相等" class="headerlink" title="判断值是否相等"></a>判断值是否相等</h4><p>用 <code>equals()</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="转进制（静态方法）"><a href="#转进制（静态方法）" class="headerlink" title="转进制（静态方法）"></a>转进制（静态方法）</h4><p>十六进制或八进制解码，转十进制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"0xA6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>十进制转其他进制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">sout</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token number">166</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ul><li>Integer.sum(a,b)</li><li>Integer.max(a,b)</li><li>Integer.compare(a,b)</li></ul><p>等等…… </p><h3 id="特别的"><a href="#特别的" class="headerlink" title="特别的"></a>特别的</h3><p>void也有包装类，其名为Void</p><p>并且，Void类无法new，只能令其为null：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Void</span> v <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>```  ## 特殊包装类特殊包装类<span class="token operator">*</span><span class="token operator">*</span>没有自动装箱拆箱<span class="token operator">*</span><span class="token operator">*</span>，因此运算时要通过 `引用<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span><span class="token punctuation">)</span>` 进行运算### <span class="token class-name">BigInteger</span>可以用于<span class="token operator">*</span><span class="token operator">*</span>非常大整数<span class="token operator">*</span><span class="token operator">*</span>的运算#### 导入```java<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigInteger</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建-2"><a href="#创建-2" class="headerlink" title="创建"></a>创建</h4><p>不能通过 <code>new</code> 创建了，而要通过 <code>.valueOf(值)</code> 创建：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigInteger</span> i <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BigInteger</span> i <span class="token operator">=</span> <span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将i的值乘1000后存入i中,注意1000的类型也是BigInteger</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h3><p>可以用于<strong>小数的精确计算</strong></p><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建-3"><a href="#创建-3" class="headerlink" title="创建"></a>创建</h4><p>同上</p><h4 id="运算-1"><a href="#运算-1" class="headerlink" title="运算"></a>运算</h4><p>以除法为例：</p><pre><code class="language-java">BigDecimal d = BigDecimal.valueOf(10);d = d.divide(BigDecimal.valueOf(3),100,RoundingMode.FLOOR);//计算10/3的结果，精确到小数点后100位//RoundingMode是舍入模式，就是精确到最后一位时，该怎么处理，这里FLOOR表示向下取整，CEILING表示向上取整</code></pre><h2 id="不可变类"><a href="#不可变类" class="headerlink" title="不可变类"></a>不可变类</h2><p>不可变类是指一旦创建其对象后，其状态（属性值）就不能被改变的类。这意味着你不能对一个不可变对象的属性进行修改。常见的不可变类有&nbsp;<code>String</code>、<code>Integer</code>、<code>LocalDate</code>&nbsp;等</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>不可变类是在定义类时就加上了final，因此无法被继承和更改</p><h3 id="字符串内容的不可变性"><a href="#字符串内容的不可变性" class="headerlink" title="字符串内容的不可变性"></a>字符串内容的不可变性</h3><p> 在 Java 中，<code>String</code>&nbsp;对象本身是不可变的。这意味着一旦创建了一个&nbsp;<code>String</code>&nbsp;对象，它的内容不能被改变。你可以对&nbsp;<code>String</code>&nbsp;进行操作（例如，连接、切割等），但<strong>产生的结果将是一个新的&nbsp;<code>String</code>&nbsp;对象，而不改变原有的&nbsp;<code>String</code></strong>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 基础 </tag>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环结构</title>
      <link href="/2025/07/24/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/"/>
      <url>/2025/07/24/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><ul><li>跳出外层循环：打标签</li></ul><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">outer<span class="token operator">:</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>inner<span class="token operator">:</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span><span class="token keyword">break</span> outer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Switch表达式</title>
      <link href="/2025/07/22/Switch%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2025/07/22/Switch%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Switch表达式"><a href="#Switch表达式" class="headerlink" title="Switch表达式"></a>Switch表达式</h1><h2 id="Java14"><a href="#Java14" class="headerlink" title="Java14"></a>Java14</h2><p>提供了新的switch语法，即：</p><p>switch的分支结果可以直接作为返回结果给到前面的变量，或是在后续课程中用做方法返回值使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token comment">//直接让res接收switch的结果</span><span class="token keyword">char</span> res <span class="token operator">=</span> <span class="token keyword">switch</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span> <span class="token operator">-&gt;</span> <span class="token char">'A'</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">8</span> <span class="token operator">-&gt;</span> <span class="token char">'B'</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token operator">-&gt;</span> <span class="token char">'C'</span><span class="token punctuation">;</span><span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token char">'D'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token comment">//注意这是一个赋值语句，后面要加分号</span><span class="token function">sout</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即switch有了返回值，变量需要接收，switch语句中的冒号，break等也不在了，取而代之的是箭头。</p><p>当然，如果除了返回值外，还需要执行别的操作，可以写成代码块的形式，此时要用到关键字 <code>yield</code>,表示延迟返回：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">char</span> res <span class="token operator">=</span> <span class="token keyword">switch</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span> <span class="token operator">-&gt;</span> <span class="token char">'A'</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">8</span> <span class="token operator">-&gt;</span> <span class="token char">'B'</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token operator">-&gt;</span> <span class="token char">'C'</span><span class="token punctuation">;</span><span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token function">sout</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">yield</span> <span class="token char">'D'</span><span class="token punctuation">;</span>   <span class="token comment">//指定延迟返回的结果，并自动结束分支</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="switch模式匹配（Java21后）"><a href="#switch模式匹配（Java21后）" class="headerlink" title="switch模式匹配（Java21后）"></a>switch模式匹配（Java21后）</h2><p>即switch除了可以根据变量的不同值做出判断外，增加了一个新功能：<strong>判断变量类型（只能是引用类型，Java25之后可以是基本类型）</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tellInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">case</span> <span class="token class-name">Integer</span> i <span class="token operator">-&gt;</span> <span class="token string">"Integer"</span><span class="token punctuation">;</span>   <span class="token comment">//i和s为定义的返回值的变量名</span>          <span class="token keyword">case</span> <span class="token class-name">String</span> s <span class="token operator">-&gt;</span> <span class="token string">"String"</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token keyword">null</span> <span class="token operator">-&gt;</span> <span class="token string">"Null"</span><span class="token punctuation">;</span>  <span class="token comment">//null和default直接加箭头</span>          <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token string">"Other"</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//记得每个语句和最后加分号</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们注意到，模式匹配中的类型后面必须跟一个变量名字，能否有一种办法省略掉呢？在Java 22之后，我们可以使用<code>_</code>下划线来直接取代，表示这是一个后续不会使用的未命名的变量</p><p>如果除了判断类型，我们还想判断别的，可以使用 <code>when</code> 关键字，在后面加上想要额外判断的条件进行额外条件检查，这种操作称为”守卫条件”</p><p><code>when</code>后面需要填写判断条件，和<code>if</code>一样，必须为一个返回值为<code>boolean</code>的表达式，也可以使用与或非操作</p><p>这样，在switch中也可以实现<strong>区间判断</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tellGrade</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> score<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token keyword">switch</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">case</span> <span class="token class-name">Integer</span> i when score <span class="token operator">&gt;=</span> <span class="token number">90</span> <span class="token operator">-&gt;</span> <span class="token string">"A"</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token class-name">Integer</span> i when score <span class="token operator">&gt;=</span> <span class="token number">80</span> <span class="token operator">-&gt;</span> <span class="token string">"B"</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token class-name">Integer</span> i when score <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token operator">-&gt;</span> <span class="token string">"C"</span><span class="token punctuation">;</span>         <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token string">"D"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a>记录类型</h3><p>此外，针对于此前提到的记录类型，在<code>switch</code>语句中支持直接解构使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">record</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>  <span class="token comment">//直接解构其参数使用</span>        <span class="token keyword">case</span> <span class="token class-name">String</span> _ <span class="token operator">-&gt;</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里针对于记录类型，类似重新写了一次类型声明，编写完整的类名加参数<code>Point(int x, int y)</code>表示当<code>object</code>如果是记录类型，则进入此分支且解构其内部成员变量，这里写的<code>x</code>和<code>y</code>作为结构出来的变量可以直接在后续使用。同样的，解构的变量如果后续不使用也可以直接使用下划线代替。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> _<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> y<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">String</span> _ <span class="token operator">-&gt;</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>switch</code>还支持对记录类内部成员的类型嵌套匹配：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">record</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">//这里data是Object类型的</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Container</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//其内部类型如果是String</span>        <span class="token keyword">case</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> i<span class="token punctuation">;</span>  <span class="token comment">//其内部类型如果是Integer</span>        <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Switch表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符</title>
      <link href="/2025/07/22/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2025/07/22/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h3 id="位移运算符"><a href="#位移运算符" class="headerlink" title="位移运算符"></a>位移运算符</h3><p>分为左移和右移运算符</p><p>但是右移多了一个<strong>考虑符号位的右移（逻辑右移）</strong>，即：”&gt;&gt;&gt;”</p><p>正常的右移是左面补齐符号位，但&lt;&lt;&lt;则是连同符号位一起右移，左边补0</p><h3 id="优先级顺序"><a href="#优先级顺序" class="headerlink" title="优先级顺序"></a>优先级顺序</h3><p><img src="/medias/useful/2025-07-23162425.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量与常量</title>
      <link href="/2025/07/22/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/"/>
      <url>/2025/07/22/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h1><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>可以定义变量为常量，使其只能被赋值一次（类似于static）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><ul><li><p>byte 字节型（1个字节）：-128~127</p></li><li><p>short 短整型（2个字节）</p></li><li><p>int（4个字节）</p></li><li><p>long （8个字节）</p><p>  定义long类型常量时，要在数字后面加L</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token number">18231723932L</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  同时，针对这种很长的数字，可以用下划线分割每一位</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token number">182_2313_312_31L</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>八进制表示：前面加0</p><p>十六进制表示：前面加0x</p><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><ul><li><p>float</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">1.5F</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>double</p></li></ul><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><ul><li>char ：<strong>2个字节</strong></li></ul><p>（ps：字符串类型：String (是对象类型) ）</p><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><ul><li>boolean</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="局部变量类型推断（Java10）"><a href="#局部变量类型推断（Java10）" class="headerlink" title="局部变量类型推断（Java10）"></a>局部变量类型推断（Java10）</h3><ul><li>var</li></ul><p>可以根据上下文自动推断数据类型（但是用的比较少）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打印</title>
      <link href="/2025/07/22/%E6%89%93%E5%8D%B0/"/>
      <url>/2025/07/22/%E6%89%93%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<p>因为有C语言和C++的一点基础，所以Java中有相似的都不再列出，只做Java中一些不同的写法和新的内容  </p><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><p>打印代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//不换行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//换行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打印时，用+号来连接内容</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字i的值为："</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>idea快速写打印代码：</p><p>写 <strong>sout</strong> 即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今后的博客</title>
      <link href="/2025/07/22/%E4%BB%8A%E5%90%8E%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/07/22/%E4%BB%8A%E5%90%8E%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>好久没更新博客了，原因是我以为只能 通过VC来编辑博客，这太麻烦了。而我一般用notion来做笔记，这就导致搁置了博客的更新，而且我也不知道该在博客上放什么了。<br>今天在学习的时候偶然想到notion页面能不能导出为md文件，搜了一下果然可以！于是我把笔记都导出来了，这样博客也能每天同步更新了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>增加了评论功能！</title>
      <link href="/2025/06/06/%E5%A2%9E%E5%8A%A0%E4%BA%86%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%EF%BC%81/"/>
      <url>/2025/06/06/%E5%A2%9E%E5%8A%A0%E4%BA%86%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="为博客新增了评论功能！"><a href="#为博客新增了评论功能！" class="headerlink" title="为博客新增了评论功能！"></a>为博客新增了评论功能！</h1><p>现在可以自由地在在博客下面评论了（不过需要我每天进入leancloud进行初始化），使用的是github上的<strong>Valine</strong>,具体见<a href="https://github.com/xCss/Valine">https://github.com/xCss/Valine</a><br>以前用gitment，但是登录github账号时会有问题，而且现在使用gitment的网站也有相同的问题。今天在读某篇博客时，意外看到了它的评论区，于是顺藤摸瓜找到了Valine。<br><em>注意</em>：手机端评论无法正常显示，但是可以发送</p>]]></content>
      
      
      
        <tags>
            
            <tag> 新功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown</title>
      <link href="/2025/06/05/markdown-1/"/>
      <url>/2025/06/05/markdown-1/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Markdown是一种轻量级的标记语言，设计初衷是让人们可以使用简单的文本格式来书写和编辑文档。<br>Markdown文件通常以.md或.markdown为扩展名。像我现在的博客都是以.md为扩展名的文件。  </p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><strong>普通文本</strong>：直接书写即可<br><strong>换行</strong>：在想要换行的末尾处加两次空格，然后再回车<br><strong>换段落</strong>：两次回车，此时与<strong>换行</strong>的区别是两行的间距更大。<br><strong>斜体</strong>:在想要斜体的部分的前后各加一个” * “<br><strong>加粗</strong>：在想要加粗部分的前后各加两个” * “，或者两个” _ “<br><strong>加粗并斜体</strong>:前后各加三个” * “<br><strong>删除线</strong>：前后各加两个” ~ “<br>     <strong>斜体，加粗，删除线可自由搭配</strong><br><strong>分割线</strong>：一行中输入三个或以上的” * “或” _ “(后面不能写别的东西,可以加空格)<br>如：  </p><hr><p><strong>一级~六级标题</strong>：想要添加几级标题，就以几个” # “ 后跟空格作为开头，之后写标题内容即可<br><strong>无序列表</strong>：以一个” * “或一个” - “或一个” + “后跟空格开头，后跟列表内容，如果三个符号混着用也会当做不同列表分开一段距离<br>如：  </p><ul><li>第1项</li><li>第2项</li></ul><ul><li>第1.1项</li><li>第1.2项</li></ul><p><strong>有序列表</strong>：数字+” . “+空格（数字作为起始点，之后列表编号依次加一）<br><strong>多级列表</strong>：在要分级的列表前加四个空格<br>如：  </p><ul><li>一级列表<ul><li>二级列表</li></ul></li><li>一级列表</li></ul><p><em><strong>注</strong></em>：列表在换行时，如果要在列表内进行换行，就按照后面加两个空格加回车即可，如果要在列表外进行换行，就必须要两次回车了<br>例：  </p><ul><li>编号1<br>编号1内的换行</li></ul><p>编号1外的换行<br><strong>勾选框</strong>：” * “ +” [ ] “后跟空格，默认为未勾选状态，如果要变为勾选状态就在方括号之间加”x”（大小写均可）<br>例：  </p><ul><li><input disabled="" type="checkbox"> 未完成的项目</li><li><input checked="" disabled="" type="checkbox"> 完成的项目<br><strong>代码块</strong>：<br>行内可以在内容前后各加一个” ` “ ,</li></ul><p>如 <code>sort()</code><br>如果是整个代码，则要在代码行前后各加三个” ` “   </p><p>并且在行前的三个” ` “ 后加对应语言名称(c,java…)<br>如： </p><pre class="line-numbers language-none"><div class="caption"><span>测试.cpp</span></div><code class="language-none">#include&lt;iostream&gt;using namespace std;int main(){    int a;    cout&lt;&lt;a;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>文本引用</strong>：<br>在行前加” &gt; “ , 并且引用可以嵌套，建议每一行之前都加这个符号用于区分<br>如：  </p><blockquote><p>这是一段引用  </p><blockquote><p>引用的嵌套  </p></blockquote></blockquote><p><strong>超链接</strong>：在想插入超链接的文本前后用[]括起，之后在（）里面写入链接<br>例如：<br>想要了解更多信息请前往<a href="https://monster.havenochoice.cn/">官网</a><br>同时也可以在用[]括起的文本后再加一个[]里面可以写入一个变量名，之后在源文件中定义该变量的网址，这样就不需要加()了。<br><strong>脚注</strong>：在想添加脚注的文字后面写[^1]（1代表序号）<br><strong>插入图片</strong>：”!” + “[]” + “()”,括号地面写图片的地址<br>其他的语法暂时用不到，先到这里 </p>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my-first-blog</title>
      <link href="/2025/06/05/my-first-post/"/>
      <url>/2025/06/05/my-first-post/</url>
      
        <content type="html"><![CDATA[<h1 id="这是我的第一篇博客！"><a href="#这是我的第一篇博客！" class="headerlink" title="这是我的第一篇博客！"></a>这是我的第一篇博客！</h1><p>从安装hexo，选择了一个主题，并在本地部署，再到注册购买域名，到versal项目对网站进行部署（不过中间间隔了三个多月）我学到了很多，最终还是决定搭建一个自己的博客网站，用来记录自己的学习过程。虽然评论功能因为插件问题，以及我目前能力不足还无法实现，但我相信我会把这个网站逐渐完善的！<br>现在我的水平可以说是一个小白，还有很多很多不会的东西，那就先从markdown语法学起吧！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
