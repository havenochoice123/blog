<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Switch表达式</title>
      <link href="/2025/07/22/Switch%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2025/07/22/Switch%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Switch表达式"><a href="#Switch表达式" class="headerlink" title="Switch表达式"></a>Switch表达式</h1><h2 id="Java14"><a href="#Java14" class="headerlink" title="Java14"></a>Java14</h2><p>提供了新的switch语法，即：</p><p>switch的分支结果可以直接作为返回结果给到前面的变量，或是在后续课程中用做方法返回值使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token comment">//直接让res接收switch的结果</span><span class="token keyword">char</span> res <span class="token operator">=</span> <span class="token keyword">switch</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span> <span class="token operator">-&gt;</span> <span class="token char">'A'</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">8</span> <span class="token operator">-&gt;</span> <span class="token char">'B'</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token operator">-&gt;</span> <span class="token char">'C'</span><span class="token punctuation">;</span><span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token char">'D'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token comment">//注意这是一个赋值语句，后面要加分号</span><span class="token function">sout</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即switch有了返回值，变量需要接收，switch语句中的冒号，break等也不在了，取而代之的是箭头。</p><p>当然，如果除了返回值外，还需要执行别的操作，可以写成代码块的形式，此时要用到关键字 <code>yield</code>,表示延迟返回：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token keyword">char</span> res <span class="token operator">=</span> <span class="token keyword">switch</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span> <span class="token operator">-&gt;</span> <span class="token char">'A'</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">8</span> <span class="token operator">-&gt;</span> <span class="token char">'B'</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token operator">-&gt;</span> <span class="token char">'C'</span><span class="token punctuation">;</span><span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token function">sout</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">yield</span> <span class="token char">'D'</span><span class="token punctuation">;</span>   <span class="token comment">//指定延迟返回的结果，并自动结束分支</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="switch模式匹配（Java21后）"><a href="#switch模式匹配（Java21后）" class="headerlink" title="switch模式匹配（Java21后）"></a>switch模式匹配（Java21后）</h2><p>即switch除了可以根据变量的不同值做出判断外，增加了一个新功能：<strong>判断变量类型（只能是引用类型，Java25之后可以是基本类型）</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tellInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">case</span> <span class="token class-name">Integer</span> i <span class="token operator">-&gt;</span> <span class="token string">"Integer"</span><span class="token punctuation">;</span>   <span class="token comment">//i和s为定义的返回值的变量名</span>          <span class="token keyword">case</span> <span class="token class-name">String</span> s <span class="token operator">-&gt;</span> <span class="token string">"String"</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token keyword">null</span> <span class="token operator">-&gt;</span> <span class="token string">"Null"</span><span class="token punctuation">;</span>  <span class="token comment">//null和default直接加箭头</span>          <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token string">"Other"</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//记得每个语句和最后加分号</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们注意到，模式匹配中的类型后面必须跟一个变量名字，能否有一种办法省略掉呢？在Java 22之后，我们可以使用<code>_</code>下划线来直接取代，表示这是一个后续不会使用的未命名的变量</p><p>如果除了判断类型，我们还想判断别的，可以使用 <code>when</code> 关键字，在后面加上想要额外判断的条件进行额外条件检查，这种操作称为”守卫条件”</p><p><code>when</code>后面需要填写判断条件，和<code>if</code>一样，必须为一个返回值为<code>boolean</code>的表达式，也可以使用与或非操作</p><p>这样，在switch中也可以实现<strong>区间判断</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tellGrade</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> score<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token keyword">switch</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">case</span> <span class="token class-name">Integer</span> i when score <span class="token operator">&gt;=</span> <span class="token number">90</span> <span class="token operator">-&gt;</span> <span class="token string">"A"</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token class-name">Integer</span> i when score <span class="token operator">&gt;=</span> <span class="token number">80</span> <span class="token operator">-&gt;</span> <span class="token string">"B"</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token class-name">Integer</span> i when score <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token operator">-&gt;</span> <span class="token string">"C"</span><span class="token punctuation">;</span>         <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token string">"D"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a>记录类型</h3><p>此外，针对于此前提到的记录类型，在<code>switch</code>语句中支持直接解构使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">record</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>  <span class="token comment">//直接解构其参数使用</span>        <span class="token keyword">case</span> <span class="token class-name">String</span> _ <span class="token operator">-&gt;</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里针对于记录类型，类似重新写了一次类型声明，编写完整的类名加参数<code>Point(int x, int y)</code>表示当<code>object</code>如果是记录类型，则进入此分支且解构其内部成员变量，这里写的<code>x</code>和<code>y</code>作为结构出来的变量可以直接在后续使用。同样的，解构的变量如果后续不使用也可以直接使用下划线代替。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> _<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> y<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token class-name">String</span> _ <span class="token operator">-&gt;</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>switch</code>还支持对记录类内部成员的类型嵌套匹配：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">record</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">//这里data是Object类型的</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Container</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//其内部类型如果是String</span>        <span class="token keyword">case</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> i<span class="token punctuation">;</span>  <span class="token comment">//其内部类型如果是Integer</span>        <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Switch表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运算符</title>
      <link href="/2025/07/22/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2025/07/22/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h3 id="位移运算符"><a href="#位移运算符" class="headerlink" title="位移运算符"></a>位移运算符</h3><p>分为左移和右移运算符</p><p>但是右移多了一个<strong>考虑符号位的右移（逻辑右移）</strong>，即：”&gt;&gt;&gt;”</p><p>正常的右移是左面补齐符号位，但&lt;&lt;&lt;则是连同符号位一起右移，左边补0</p><h3 id="优先级顺序"><a href="#优先级顺序" class="headerlink" title="优先级顺序"></a>优先级顺序</h3><p><img src="/medias/useful/2025-07-23162425.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量与常量</title>
      <link href="/2025/07/22/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/"/>
      <url>/2025/07/22/%E5%8F%98%E9%87%8F%E4%B8%8E%E5%B8%B8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h1><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><p>可以定义变量为常量，使其只能被赋值一次（类似于static）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><ul><li><p>byte 字节型（1个字节）：-128~127</p></li><li><p>short 短整型（2个字节）</p></li><li><p>int（4个字节）</p></li><li><p>long （8个字节）</p><p>  定义long类型常量时，要在数字后面加L</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token number">18231723932L</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  同时，针对这种很长的数字，可以用下划线分割每一位</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token number">182_2313_312_31L</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>八进制表示：前面加0</p><p>十六进制表示：前面加0x</p><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><ul><li><p>float</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">1.5F</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>double</p></li></ul><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><ul><li>char ：<strong>2个字节</strong></li></ul><p>（ps：字符串类型：String (是对象类型) ）</p><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><ul><li>boolean</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="局部变量类型推断（Java10）"><a href="#局部变量类型推断（Java10）" class="headerlink" title="局部变量类型推断（Java10）"></a>局部变量类型推断（Java10）</h3><ul><li>var</li></ul><p>可以根据上下文自动推断数据类型（但是用的比较少）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">sout</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打印</title>
      <link href="/2025/07/22/%E6%89%93%E5%8D%B0/"/>
      <url>/2025/07/22/%E6%89%93%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<p>因为有C语言和C++的一点基础，所以Java中有相似的都不再列出，只做Java中一些不同的写法和新的内容  </p><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><p>打印代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//不换行</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//换行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打印时，用+号来连接内容</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数字i的值为："</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>idea快速写打印代码：</p><p>写 <strong>sout</strong> 即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今后的博客</title>
      <link href="/2025/07/22/%E4%BB%8A%E5%90%8E%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2025/07/22/%E4%BB%8A%E5%90%8E%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>好久没更新博客了，原因是我以为只能 通过VC来编辑博客，这太麻烦了。而我一般用notion来做笔记，这就导致搁置了博客的更新，而且我也不知道该在博客上放什么了。<br>今天在学习的时候偶然想到notion页面能不能导出为md文件，搜了一下果然可以！于是我把笔记都导出来了，这样博客也能每天同步更新了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>增加了评论功能！</title>
      <link href="/2025/06/06/%E5%A2%9E%E5%8A%A0%E4%BA%86%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%EF%BC%81/"/>
      <url>/2025/06/06/%E5%A2%9E%E5%8A%A0%E4%BA%86%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h1 id="为博客新增了评论功能！"><a href="#为博客新增了评论功能！" class="headerlink" title="为博客新增了评论功能！"></a>为博客新增了评论功能！</h1><p>现在可以自由地在在博客下面评论了（不过需要我每天进入leancloud进行初始化），使用的是github上的<strong>Valine</strong>,具体见<a href="https://github.com/xCss/Valine">https://github.com/xCss/Valine</a><br>以前用gitment，但是登录github账号时会有问题，而且现在使用gitment的网站也有相同的问题。今天在读某篇博客时，意外看到了它的评论区，于是顺藤摸瓜找到了Valine。<br><em>注意</em>：手机端评论无法正常显示，但是可以发送</p>]]></content>
      
      
      
        <tags>
            
            <tag> 新功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown</title>
      <link href="/2025/06/05/markdown-1/"/>
      <url>/2025/06/05/markdown-1/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Markdown是一种轻量级的标记语言，设计初衷是让人们可以使用简单的文本格式来书写和编辑文档。<br>Markdown文件通常以.md或.markdown为扩展名。像我现在的博客都是以.md为扩展名的文件。  </p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p><strong>普通文本</strong>：直接书写即可<br><strong>换行</strong>：在想要换行的末尾处加两次空格，然后再回车<br><strong>换段落</strong>：两次回车，此时与<strong>换行</strong>的区别是两行的间距更大。<br><strong>斜体</strong>:在想要斜体的部分的前后各加一个” * “<br><strong>加粗</strong>：在想要加粗部分的前后各加两个” * “，或者两个” _ “<br><strong>加粗并斜体</strong>:前后各加三个” * “<br><strong>删除线</strong>：前后各加两个” ~ “<br>     <strong>斜体，加粗，删除线可自由搭配</strong><br><strong>分割线</strong>：一行中输入三个或以上的” * “或” _ “(后面不能写别的东西,可以加空格)<br>如：  </p><hr><p><strong>一级~六级标题</strong>：想要添加几级标题，就以几个” # “ 后跟空格作为开头，之后写标题内容即可<br><strong>无序列表</strong>：以一个” * “或一个” - “或一个” + “后跟空格开头，后跟列表内容，如果三个符号混着用也会当做不同列表分开一段距离<br>如：  </p><ul><li>第1项</li><li>第2项</li></ul><ul><li>第1.1项</li><li>第1.2项</li></ul><p><strong>有序列表</strong>：数字+” . “+空格（数字作为起始点，之后列表编号依次加一）<br><strong>多级列表</strong>：在要分级的列表前加四个空格<br>如：  </p><ul><li>一级列表<ul><li>二级列表</li></ul></li><li>一级列表</li></ul><p><em><strong>注</strong></em>：列表在换行时，如果要在列表内进行换行，就按照后面加两个空格加回车即可，如果要在列表外进行换行，就必须要两次回车了<br>例：  </p><ul><li>编号1<br>编号1内的换行</li></ul><p>编号1外的换行<br><strong>勾选框</strong>：” * “ +” [ ] “后跟空格，默认为未勾选状态，如果要变为勾选状态就在方括号之间加”x”（大小写均可）<br>例：  </p><ul><li><input disabled="" type="checkbox"> 未完成的项目</li><li><input checked="" disabled="" type="checkbox"> 完成的项目<br><strong>代码块</strong>：<br>行内可以在内容前后各加一个” ` “ ,</li></ul><p>如 <code>sort()</code><br>如果是整个代码，则要在代码行前后各加三个” ` “   </p><p>并且在行前的三个” ` “ 后加对应语言名称(c,java…)<br>如： </p><pre class="line-numbers language-none"><div class="caption"><span>测试.cpp</span></div><code class="language-none">#include&lt;iostream&gt;using namespace std;int main(){    int a;    cout&lt;&lt;a;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>文本引用</strong>：<br>在行前加” &gt; “ , 并且引用可以嵌套，建议每一行之前都加这个符号用于区分<br>如：  </p><blockquote><p>这是一段引用  </p><blockquote><p>引用的嵌套  </p></blockquote></blockquote><p><strong>超链接</strong>：在想插入超链接的文本前后用[]括起，之后在（）里面写入链接<br>例如：<br>想要了解更多信息请前往<a href="https://monster.havenochoice.cn/">官网</a><br>同时也可以在用[]括起的文本后再加一个[]里面可以写入一个变量名，之后在源文件中定义该变量的网址，这样就不需要加()了。<br><strong>脚注</strong>：在想添加脚注的文字后面写[^1]（1代表序号）<br><strong>插入图片</strong>：”!” + “[]” + “()”,括号地面写图片的地址<br>其他的语法暂时用不到，先到这里 </p>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my-first-blog</title>
      <link href="/2025/06/05/my-first-post/"/>
      <url>/2025/06/05/my-first-post/</url>
      
        <content type="html"><![CDATA[<h1 id="这是我的第一篇博客！"><a href="#这是我的第一篇博客！" class="headerlink" title="这是我的第一篇博客！"></a>这是我的第一篇博客！</h1><p>从安装hexo，选择了一个主题，并在本地部署，再到注册购买域名，到versal项目对网站进行部署（不过中间间隔了三个多月）我学到了很多，最终还是决定搭建一个自己的博客网站，用来记录自己的学习过程。虽然评论功能因为插件问题，以及我目前能力不足还无法实现，但我相信我会把这个网站逐渐完善的！<br>现在我的水平可以说是一个小白，还有很多很多不会的东西，那就先从markdown语法学起吧！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
